

---
Checklist of settings in ecore

1) The root metaclass(es) for your extension must extend AbstractExtension from the core meta-model. This allows them to be added as a child in the 'extensions'
   containment of any EventBElement.
2) The root metaclass(es) for your extension may have an EAnnotation to list the allowable parents as the meta-classes that it extends (i.e. allowable parents). The
   'source' should be set to 'org.eventb.emf.core.extendedMetaClasses'. You may add as many meta-classes as you like to the 'references' field of the EAnnotation.
   This EAnnotation affects the item provider code generated in the *.edit plug-in. If you do not add an EAnnotation, your root metaclass can be added as a child to
   ANY Event-B element. (note that this only affects code based on the *.edit plug-in (e.g. emf editors). Other code will still be able to add your extension anywhere).
<<<TBD: We could add a key-value pair to this annotation to define the Extension ID string. This could be used to generate the Extension ID in the impl class by modifying the templates>>>
3) If you want children of your root meta-classes to have flexible ordering (rather than to be grouped in their containments) then you should set the properties true for
	derived, volatile, transient properties. (and, after generation, hand code their get methods as described below) 
	(N.B. Make sure the parent meta-class extends EventBElement directly or indirectly, otherwise ordered children is not available)
4) AFTER MAKING CHANGES - consider whether old models will still load properly with this metamodel? If not (i.e. usually!) update the year (last part) of the nsURI. 
	Note that changing the nsURI means that old models will try to load.. you need to work out how to convert hem if you want to update them to the new meta-model.. 
	.. but at least they will not be damaged.

---
CheckList of changes to genmodel

Model top node
1) Change containment proxies to true
 (so far there is no reason for containments to be across resource but this is done for consistency with core and in case extenders require it.)
2) Using dynamic templates as described below:
	i) Dynamic Templates = true
	ii) Template Directory = /org.eventb.emf.core/templates
3) set the Java compliance level to that being used in the rest of the plug-ins
4) set up the copyright header text 
	
Package Records
1) Change child creation extenders to true
2) Change extensible  provider factory to true
(Also: our conventions are to set base package to ac.soton.eventb - this is then prefixed to all java source packages.)

Checklist of post-gen code changes (considering changing the Jet templates for these)
1) in generated edit plugin -> plugin.xml, in the extension point childCreationExtenders, change the package URI to the one containing the allowable parents 
   (e.g. http://emf.eventb.org/models/core/context/2022) The generator always sets it to core. N.b. if more than one package, add another 
   extension point
2) This item only applies if you want to save your extension model as a string attribute and not generate rodin elements for each element in your extension. 
[The alternative is to define Rodin equivalents for each part of your metamodel and then write synchronisers for all of them. For example see the Records plugin]
(Somewhere in a plugin.xml) Add an extension to define that the SerialisedExtensionSynchroniser should be used for your extension class
   <extension
         point="org.eventb.emf.persistence.synchroniser">
      <emfPackage
            name="<myExtension> Package"
            nsURI="http://soton.ac.uk/models/eventb/<myExtension>">
         <synchroniser
               emf_class="<myExtensionElementClass>"
               name="<myExtension> Synchroniser"
               rodin_id="ac.soton.eventb.emf.core.extension.persistence.serialisedExtension"
               synchroniser_class="ac.soton.eventb.emf.core.extension.persistence.SerialisedExtensionSynchroniser">
         </synchroniser>
      </emfPackage>
   </extension>
3) optional: (ExtensionId is no longer 'required' but some behaviour may need it) in the impl class for your extension element, set up the ExtensionID with the last segment
   a UUID generated for each segment [TBD: Add more detail here]   
4) optional: make customisations as in the core packages for inter-resource referencing (i.e. reference names derived attributes)
5) optional: make customisations for lazy proxy construction.
6) if you have derived containments (see item 3 under ecore section above): change @generated to @generated not and replace the default code with:
		return getDerivedChildren(<ClassName>.class, <PACKAGENAME>Package.<PACKAGENAME>__<CLASSNAME>);
			where <ClassName> is the name of the class of the children in the containment in camel case,
			where <PACKAGENAME> is the name of your package in capitals,
			where <CLASSNAME> is the name of the class of the children in the containment in capitals
7) AFTER CHANGES - the API tools will generate warnings asking you to add @since <new version> tags to all change API items. It is best to add these at the end of the
   user doc sections so that they don't get overwritten every time code is re-generated.. e.g.
   	 * <!-- begin-user-doc -->
	 * blah blah blah
	 * @since 6.0
	 * <!-- end-user-doc -->

----------------------------------------------------------------
Thats it! the rest is just notes about the customised code generators
----------------------------------------------------------------

Customisations made to the Dynamic Templates (Under development)
This allows the code generation to be customised so that post-gen code changes are not needed.
The EMF templates have been copied from org.eclipse.emf.codegen.ecore into org.eventb.emf.core
The templates have been customised as listed below.

1)ItemProviderAdapterFactory
added: (in case method of creation switch (4th clause) - n.b. this may need to be done in other clauses in this method)
				EAnnotation annotation = <%=createClass.getQualifiedClassifierAccessor()%>.getEAnnotation("org.eventb.emf.core.extendedMetaClasses");
				if (annotation == null  || annotation.getReferences().contains(object.eClass()))

2)ItemProvider - Similar to 1 but for current package rather than extensible child providers.
		<%if ("CorePackage.Literals.EVENT_BELEMENT__EXTENSIONS".equals(createFeature.getQualifiedFeatureAccessor())) {%>
			<%genModel.addImport("org.eventb.emf.core.EventBObject");%>
		if (<%=createClass.getQualifiedClassifierAccessor()%>.getEAnnotation("org.eventb.emf.core.extendedMetaClasses") == null  || 
			<%=createClass.getQualifiedClassifierAccessor()%>.getEAnnotation("org.eventb.emf.core.extendedMetaClasses").getReferences().contains(((EventBObject)object).eClass()))
		<%}%>
			newChildDescriptors.add
				(createChildParameter
					(<%=createFeature.getQualifiedFeatureAccessor()%>,
        <%if (createClass.isMapEntry()) { %>
				 	<%=createClass.getGenPackage().getQualifiedEFactoryInstanceAccessor()%>.create(<%=createClass.getQualifiedClassifierAccessor()%>)));
        <%} else {%>
				 	<%=createClass.getGenPackage().getQualifiedFactoryInstanceAccessor()%>.create<%=createClass.getName()%>()));
        <%}%>
        
        
3) TBD: Automatically select the correct sub package in the edit plugin childCreationExtender extension.

